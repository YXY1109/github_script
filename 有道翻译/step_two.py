import base64
import hashlib
import json

from Crypto.Cipher import AES
from Crypto.Hash import MD5

key = b"ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl"
iv = b"ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4"


def get_y(data):
    hash_object = hashlib.md5()
    # 更新哈希对象，传入密钥key
    hash_object.update(data)
    # 计算哈希值，返回前16个字节
    hash_value = hash_object.digest()[:16]
    return hash_value


y_o = get_y(key)
print(f"y_o:{y_o}")
y_n = get_y(iv)
print(f"y_n:{y_n}")


def decode(src: str) -> dict:
    key = b"ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl"
    iv = b"ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4"
    cryptor = AES.new(
        MD5.new(key).digest()[:16], AES.MODE_CBC, MD5.new(iv).digest()[:16]
    )
    res = cryptor.decrypt(base64.urlsafe_b64decode(src))
    txt = res.decode("utf-8")
    return json.loads(txt[: txt.rindex("}") + 1])


if __name__ == '__main__':
    data = "Z21kD9ZK1ke6ugku2ccWu-MeDWh3z252xRTQv-wZ6jddVo3tJLe7gIXz4PyxGl73nSfLAADyElSjjvrYdCvEP4pfohVVEX1DxoI0yhm36yswyZt_QBUqGyys3jGytX5wfhbCrkkdmKgExuwV9yEPLtWt5AN0pLelU0MNFp_DZdBooUEpP_iknvFzTAOt5odrUwZjUcM3N4FMxJyjYtu7qAq5CESMx4WJOj2176hbh9zRCDV0TaMVq4l1m9PHznRroA4OzuRG_gV5xVnT6yK0JrqCigFtkow_W8mc-d_h47PD3DSX9rUjuRpj5QbtkBimEqodhZQCBNrFYG9s8FexuiOW1z8wvLAViZxP0g85BggxYXFHpUhaeIAn7_CLYz1RXAE0EVtyU7y2ncElXrLmQCmWTemNm9iMTMyzllPQBld8K_y6hWlUztZp47WC48DndmU8eGz86EBqIPecL9e1WZADkDAojDx5knf-m_qLVTNiZ2BP8EOXKD8uOyTbyAfTALs6S5yIYhxTVVSjZCkW4Pw2w3Ae9NxUniXGZ8N58JXduzkeg6B7bMBfUXPGwfdtI-jqpCJsMrsglxBy2zx4HJ46svAqiZtJC9ip22c41SoU4gIz0H6k-FbJywVhzwFDsu2Yn7jnhh-H65HrBER6bk9bSd_4isyRO6w8mght77b_Ek8gAxVGDsy16natqREh-WqPRXKcaiorpNw6dvmDGGDhzWXY3uWb0rPIG4QeeVnrYN2nxz2w7jU94uxP6MKO6U1eAd8yQJtP_YP0XxkKKceHcDFmoYtIPOJKKRXamuVgP1nHdLqTU_cbJ3VKEzSALTv1nEsZvpyDHYTRktIcXb3E05DmeDIk5n26IZhSZHMM1NaK_eKEwzbVo_uOyjftJS7qz8zBaGkp43k_PRvmQ2L7rvEVf0nkLHTx_n0bU0_DkVEdBHnsADF_HBn7AeYOEFXzfurlPbwgtimZr2YGGVGnfwxyPhPCwIjmkwxj5ym5S-cYvfafV4xBDAy4SqrxRpVbTH1aOcaEgIIDA-t4l8cR4Hms5wgQEp7TymdGAFlpjt3jhiuAU23V27-J-MG-6n W76qmr3EWt9fy-FjAkN7ylASTceIEA90qNu8jqsndjiR_xvHyfcanHzHSEEmf_m_H0LoSVlLmWZKrGLiFFbyOBXZpL4MoQ25XaYt0qzCZee7ZKwLpXYefYgoRxsi0aPK6HxXKk7iK251c0Ra6m5L_Z-brQPvt0-pIVVnGiz43DJoQSvVQ1rbY3bqMWj7ewf1CL_r5kx5XogkYOFX9fBPJe-TU1HVx4YhbRTprkOQYrSGUoSilydIEDzRtJyr1G2Q5Qq0HVMAPvb0MDzOlrxT3Yo3TgYJYgivQnFaBHtKZb0epC9DKp7BoqrBd9n0zyPW4cdlKzVmvyhXMcpSASYudjPPlRzK5MwmV2XgtJ2gzjKdp--eUv04AXZgzJZh8q-FTkrxX53jenWYdpmIOQXgU7FE1MY7pqrPsjzsse8_jjwUmICEXZKauOvg7ZBfCe1P9mY2wKnGIYGq7uwwVEtzM9P8GFVWv3HLg22Q0q16HOr8tJ2wuCXUCp1SEWzTAlJtQdDth8KT_HtxNzJ4TEfvRrTq4WXrklMNTChiebR6PG3kIJNC_MYX7DeC-ex7jZiuVm-vgK5YWByGncCquYbTf29HqAxiuazeSVEgzJoyvLz0wC78J1dinmF9x3xcB2Vgm18e_ZCtvTKlOOEiUUilIMo6TVYVsfM70jR_12DTEwviQXUmSY5lv3Q6udDaAfW3Dgug2d3Bqd-CzU7umePAdRvRzdV4pFD7BN2tC5dv59lGqA2S8fnJP-ImNZbasCX6AVyhZT0m_Yst2MmFpOigy1J0kD_2MAbVtuvjLPWmeNd36rFAZqGQ5lIXDmyYtAglV46gGy_jEMDZmzQSfyF4ePHtmd-gqaGPUaxCYIXrmAS_L2sO_Po1id6jxEsiHLr1iXb7TR6PjCi-PU2xf2LgZE0j8s7dzpWNu6uxpw2L4_3AAbvf8g36gDqXDi_2b5jiAtsRijWwB-lUxo72geGDPmHiP81ndLBTISNgcOE6QZMmXLcJKRPudKfxeVJgFj576ry5UGsEOX7HI7mQ6SMpKUP4Rp1qzlg2XqLSEP-4n SQT9zyGBE4FPvxX977N9VcFBwFn-l_ULzQsTxwWWnlNSnZH4kk3vb6TGFqagHT6d1U9kIRQzaraKxoBboUGrk0KnNoZGw4a3eba-i96PDuyWCtSqAc48YpLu2IIZKwuTngz570FKcLCN4UBnPhWsjR8xjUCsD0ROROMlipR6-zomzzScKKIC91ta0EKFYPF2Te1KQ0M78azQ5Wu4OQs_WFNMLrpZakcsFV2qjTV2oUA3-jMukP36bRgaazDn-C5dljmPp7Lhh8fzfH4d3tGiJkQcH-MklSra1mtYuqXmIcLPzQw1nqrHt0v7GRZFPtMqG1erkWZG0Zpuz3DZ1Wk_TGSJxu1geDrTfJMlf00GJP5ELPCFRxJY_25C9DxF3KR24232W7786WJt6BWJiFynr-wfntQWlPE8K6JcmgvBB8L_PuMEqUKtTtNuMB0SAFxE_-r9u46dZOL6DdtzOJ5GZJJpMNXfI9A-XKOtNJB1td7wZOkOsVcRaVUTw7Ib4Me8nONww3ck-YHv12GHd7t_dGqOGjATYqUp_bS5iX4rWgwhE6ONKwFJiq6foImDMtqSXuc83sRWLu4TOdjlJruhXz7-I1YLcuL5oasyLs2BmCe829761Q9wX2g5Gm2YncSz5JPBsgl4Scb2v7icx8In0_-1 T9QVBZSZODlBSb7dk4lcXgHCXOSWbhUcZxx3mg1RW9KzA70IuRu3eU0Hwzeg0I6F1fyZ6E0W_R38BCWMh-LyQLwqf-CJV4CSuTjTFsvMoR1-acs3TuDBxvj3Rza3xkzSDiqSMwCHzG1N1yjH4Tn6-EPxHBmz9GQrEpkv_RWmhcOluQdNX_OzwCAXNLtuwEfRKgDonuw6yn1V-g5dwBdKb9G7b0wx2WxAgTSr30baC2K_M_3fAv0XEnE8SDt4udaOe96lgaaMXOc6zU-p06l3014d_D_aHrxopg_OaaVJftIQoxndmxpH4L9nVOSVieoexEtlrK4KERlLuy7omLn-iXxzzVcfby1MlyEVJE8NQWx6fGFGP9IfnbdDv7mWJ6k_pqjvdkHYWuzVR4yQ2YDCl_g4Z2xhXUqcbhxuVvy9laOhgIk_2lF3nIYYUuKRPXk3b9J5dKlKl0wgqNCInx_cHCEm5tWpDiI6qJSpGCLNzDs3c8CW8BaPhXI_6xBpFWEY9ZOR15dusChWPXTRrRXtD_y21YgY26LvS36oL1R4nemOS-ntg6GtUyYkfXp5V1oC7TMHqz7y8s1WLrJpp83umzsm5ZfqwOfwL1RyW1ss64w9E_2BmGNydpCbm68Xnkho9hmV_t2K0Lk4rJb1Myg3o_aqZoEFjFLZn6hiBm7MUZgC381VvzvJLEBP6d5RMokUrTaTjhfSdb6SUfquAVXcJka4cm813vd4hitCSPT0KzxTzQztTCNQVy4_Ou_dQRWXE4eSiIBLsTxVIs-5 SVgPlE19quOVu45zAVnq2MMkeWvvs5HrQMLCCBnrG6rYf--DkQZtWLDo-5 v44vAyGLMnY_Etnx2_6s3I4HAEqq6k9bKydHsYoPcjB0AaqSaHoNM7CVthLj2sumn-V-Chg7frIL5yyvwQIvOjaugOCGlkGpj_ISd_dDqpMcjNEBwkolq4MiSta5GCYzFjMc58fDA=="
    print(decode(data))
